{
  "service": {
    "service": "tradingpost-job",
    "serviceObject": {
      "name": "tradingpost-job"
    },
    "provider": {
      "stage": "production",
      "name": "aws",
      "architecture": "x86_64",
      "environment": {
        "CONFIGURATION_ENV": "production",
        "NODE_ENV": "production"
      },
      "tags": {
        "service": "tradingpost-background-job"
      },
      "runtime": "nodejs16.x",
      "iam": {
        "role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role"
      },
      "vpc": {
        "securityGroupIds": [
          "sg-0f6d411d350ce59d4"
        ],
        "subnetIds": [
          "subnet-01fa64739811f141b",
          "subnet-04943437a165d812b",
          "subnet-0365b7b01827b2dfe"
        ]
      },
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CollectDashibkrDashtradesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-collect-ibkr-trades",
              "RetentionInDays": 14
            }
          },
          "CollectDashtradesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-collect-trades",
              "RetentionInDays": 14
            }
          },
          "AddDashmetaDashdataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-add-meta-data",
              "RetentionInDays": 14
            }
          },
          "AddDashholidaysLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-add-holidays",
              "RetentionInDays": 14
            }
          },
          "IntradayDashpricingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-intraday-pricing",
              "RetentionInDays": 14
            }
          },
          "EodDashpricingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-eod-pricing",
              "RetentionInDays": 14
            }
          },
          "SecurityDashpruningLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-security-pruning",
              "RetentionInDays": 14
            }
          },
          "SpotifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-spotify",
              "RetentionInDays": 14
            }
          },
          "SubstackLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-substack",
              "RetentionInDays": 14
            }
          },
          "TwitterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-twitter",
              "RetentionInDays": 14
            }
          },
          "YoutubeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tradingpost-job-production-youtube",
              "RetentionInDays": 14
            }
          },
          "CollectDashibkrDashtradesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/collect-ibkr-trades.zip"
              },
              "Handler": "brokerage/collect-ibkr-trades.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-collect-ibkr-trades",
              "MemorySize": 1024,
              "Timeout": 900,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Collects Ibkr Trades",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CollectDashibkrDashtradesLogGroup"
            ]
          },
          "CollectDashtradesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/collect-trades.zip"
              },
              "Handler": "brokerage/collect-trades.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-collect-trades",
              "MemorySize": 512,
              "Timeout": 900,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Collects Finicity Trades Daily",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CollectDashtradesLogGroup"
            ]
          },
          "AddDashmetaDashdataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/add-meta-data.zip"
              },
              "Handler": "market-data/add-meta-data.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-add-meta-data",
              "MemorySize": 1024,
              "Timeout": 900,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "AddDashmetaDashdataLogGroup"
            ]
          },
          "AddDashholidaysLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/add-holidays.zip"
              },
              "Handler": "market-data/add-holidays.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-add-holidays",
              "MemorySize": 1024,
              "Timeout": 300,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests market holidays once a year",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "AddDashholidaysLogGroup"
            ]
          },
          "IntradayDashpricingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/intraday-pricing.zip"
              },
              "Handler": "market-data/intraday-pricing.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-intraday-pricing",
              "MemorySize": 1024,
              "Timeout": 600,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests intraday pricing",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "IntradayDashpricingLogGroup"
            ]
          },
          "EodDashpricingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/eod-pricing.zip"
              },
              "Handler": "market-data/eod-pricing.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-eod-pricing",
              "MemorySize": 1024,
              "Timeout": 600,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "EodDashpricingLogGroup"
            ]
          },
          "SecurityDashpruningLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/security-pruning.zip"
              },
              "Handler": "market-data/security-pruning.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-security-pruning",
              "MemorySize": 1024,
              "Timeout": 600,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Prunes security data",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "SecurityDashpruningLogGroup"
            ]
          },
          "SpotifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/spotify.zip"
              },
              "Handler": "social-media/spotify.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-spotify",
              "MemorySize": 1024,
              "Timeout": 600,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests Spotify User Data",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "SpotifyLogGroup"
            ]
          },
          "SubstackLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/substack.zip"
              },
              "Handler": "social-media/substack.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-substack",
              "MemorySize": 1600,
              "Timeout": 900,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests Substack Data",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "SubstackLogGroup"
            ]
          },
          "TwitterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/twitter.zip"
              },
              "Handler": "social-media/twitter.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-twitter",
              "MemorySize": 1600,
              "Timeout": 900,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests Twitter Data",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 0
            },
            "DependsOn": [
              "TwitterLogGroup"
            ]
          },
          "YoutubeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z/youtube.zip"
              },
              "Handler": "social-media/youtube.run",
              "Runtime": "nodejs16.x",
              "FunctionName": "tradingpost-job-production-youtube",
              "MemorySize": 1024,
              "Timeout": 600,
              "Architectures": [
                "x86_64"
              ],
              "Description": "Ingests YouTube User Data",
              "Tags": [
                {
                  "Key": "service",
                  "Value": "tradingpost-background-job"
                }
              ],
              "Environment": {
                "Variables": {
                  "CONFIGURATION_ENV": "production",
                  "NODE_ENV": "production"
                }
              },
              "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 1
            },
            "DependsOn": [
              "YoutubeLogGroup"
            ]
          },
          "AddDashholidaysLambdaVersionVASOZErSrAv6ThYov5lNHLlC3cFDI4snUlfwsAKNCk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddDashholidaysLambdaFunction"
              },
              "CodeSha256": "WUBHroXzmTE8S9spQOlY3wFwRwIUIoSMUsLkAW9qZ/M=",
              "Description": "Ingests market holidays once a year"
            }
          },
          "AddDashmetaDashdataLambdaVersionc5ak9aJjCttM9cOew9B2Z1UsJbWY6xvI7P2mSTAMw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddDashmetaDashdataLambdaFunction"
              },
              "CodeSha256": "lt3n1tkI765bCHaAt/+vAalzo9asDgLL8QIuIUDMBB8=",
              "Description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing"
            }
          },
          "EodDashpricingLambdaVersionJyVjO5xMyjWwFzMSyGvY0oqseF2at5NCgvNk28peXM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EodDashpricingLambdaFunction"
              },
              "CodeSha256": "aGAwzVQvepriB5R5spF8Awn0IhfjIE11uFY2cPc41jI=",
              "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in"
            }
          },
          "SecurityDashpruningLambdaVersionqb6Eh4WcmDrlzJPFtULmJaEP1y5huy0USsGKcqR3U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SecurityDashpruningLambdaFunction"
              },
              "CodeSha256": "86r2JnMZUHNUtYsDxbgxXhcBq0leupp666XHAgWIYAU=",
              "Description": "Prunes security data"
            }
          },
          "IntradayDashpricingLambdaVersionfmNinRl7Txp11FTDmN4Vxbub6Xc0Y5TP4D2rQUFp4KI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IntradayDashpricingLambdaFunction"
              },
              "CodeSha256": "u0+UOsn2+gl0A8f4o/eJ7Ng4Mw6mdrMpdcz/QcjWA3E=",
              "Description": "Ingests intraday pricing"
            }
          },
          "CollectDashibkrDashtradesLambdaVersionAQ1a11T8MntnEvX0otATZKqqGk3ZHzZViQ7FlUmTfpQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectDashibkrDashtradesLambdaFunction"
              },
              "CodeSha256": "p5sWikTxqiRLnNqlnpmWSTcV2U/4QyJkdmpZW9SyiWo=",
              "Description": "Collects Ibkr Trades"
            }
          },
          "CollectDashtradesLambdaVersioni04zawW6RIw5xjDsUNLx6aKXIvQ9ko5tJoSbZ1WeSo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectDashtradesLambdaFunction"
              },
              "CodeSha256": "eCGMKSUxRCYRTiuZpmVdQPuT3RZVdhJ3RnLO+ddBosA=",
              "Description": "Collects Finicity Trades Daily"
            }
          },
          "SpotifyLambdaVersionHk2h3P3TsBTzmBI6wq25tnqVczj7vdjRhHXi3EGp4M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotifyLambdaFunction"
              },
              "CodeSha256": "kcIk6+xuIXnysCw4/T/G74DaQLIMMnbWwwSRPEW6Wmg=",
              "Description": "Ingests Spotify User Data"
            }
          },
          "YoutubeLambdaVersionoADrdtjvApkLVb1tnb3fJBOtHWguFr16VT9GVseG8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "YoutubeLambdaFunction"
              },
              "CodeSha256": "vNu8WA551rlrLHRoEHxlTZPdwl29YLygTNRr0SY0Zf8=",
              "Description": "Ingests YouTube User Data"
            }
          },
          "SubstackLambdaVersionEn5sV226l19ryJPAhCmQtqA8ehTYX7TnJw5177kc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubstackLambdaFunction"
              },
              "CodeSha256": "HRUutXUnrvby6PWPjYJRO5EmJjGiFqifCIRX3Aqra9Y=",
              "Description": "Ingests Substack Data"
            }
          },
          "TwitterLambdaVersioneJuB47xlvgBeHiRNhgukX9iKcrEqbsfKUR76Pbwwvt4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TwitterLambdaFunction"
              },
              "CodeSha256": "1a0v1u/difqMp3RURXbjnaXCgaaOKxFR90MidgJH1l8=",
              "Description": "Ingests Twitter Data"
            }
          },
          "CollectDashibkrDashtradesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(*/10 * ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CollectDashibkrDashtradesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "collect-ibkr-tradesSchedule"
                }
              ]
            }
          },
          "CollectDashibkrDashtradesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectDashibkrDashtradesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CollectDashibkrDashtradesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "CollectDashtradesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 11 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CollectDashtradesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "collect-tradesSchedule"
                }
              ]
            }
          },
          "CollectDashtradesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectDashtradesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CollectDashtradesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "AddDashmetaDashdataEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "AddDashmetaDashdataLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "add-meta-dataSchedule"
                }
              ]
            }
          },
          "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "AddDashmetaDashdataEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "AddDashmetaDashdataLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "add-meta-dataSchedule"
                }
              ]
            }
          },
          "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "AddDashmetaDashdataEventsRuleSchedule3": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 12 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "AddDashmetaDashdataLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "add-meta-dataSchedule"
                }
              ]
            }
          },
          "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataEventsRuleSchedule3",
                  "Arn"
                ]
              }
            }
          },
          "AddDashmetaDashdataEventsRuleSchedule4": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 11 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "AddDashmetaDashdataLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "add-meta-dataSchedule"
                }
              ]
            }
          },
          "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule4": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "AddDashmetaDashdataEventsRuleSchedule4",
                  "Arn"
                ]
              }
            }
          },
          "AddDashholidaysEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 0 1 1 ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "AddDashholidaysLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "add-holidaysSchedule"
                }
              ]
            }
          },
          "AddDashholidaysLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashholidaysLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "AddDashholidaysEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "IntradayDashpricingEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(* 12-20 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "IntradayDashpricingLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "intraday-pricingSchedule"
                }
              ]
            }
          },
          "IntradayDashpricingLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IntradayDashpricingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "IntradayDashpricingEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "IntradayDashpricingEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(2 20 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "IntradayDashpricingLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "intraday-pricingSchedule"
                }
              ]
            }
          },
          "IntradayDashpricingLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IntradayDashpricingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "IntradayDashpricingEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "EodDashpricingEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "EodDashpricingLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "eod-pricingSchedule"
                }
              ]
            }
          },
          "EodDashpricingLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EodDashpricingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "EodDashpricingEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "EodDashpricingEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "EodDashpricingLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "eod-pricingSchedule"
                }
              ]
            }
          },
          "EodDashpricingLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EodDashpricingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "EodDashpricingEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "SecurityDashpruningEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 7 ? * MON-FRI *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SecurityDashpruningLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "security-pruningSchedule"
                }
              ]
            }
          },
          "SecurityDashpruningLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SecurityDashpruningLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "SecurityDashpruningEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "SpotifyEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 11 ? * MON-SUN *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SpotifyLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "spotifySchedule"
                }
              ]
            }
          },
          "SpotifyLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "SpotifyEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "SpotifyEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 23 ? * MON-SUN *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SpotifyLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "spotifySchedule"
                }
              ]
            }
          },
          "SpotifyLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "SpotifyEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "SubstackEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 11 ? * MON-SUN *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SubstackLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "substackSchedule"
                }
              ]
            }
          },
          "SubstackLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubstackLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "SubstackEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "SubstackEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 23 ? * MON-SUN *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SubstackLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "substackSchedule"
                }
              ]
            }
          },
          "SubstackLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubstackLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "SubstackEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "TwitterEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(*/10 * ? * MON-SUN *)",
              "State": "DISABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "TwitterLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "twitterSchedule"
                }
              ]
            }
          },
          "TwitterLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TwitterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "TwitterEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "YoutubeEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 11 ? * MON-SUN *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "YoutubeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "youtubeSchedule"
                }
              ]
            }
          },
          "YoutubeLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "YoutubeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "YoutubeEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-ServerlessDeploymentBucketName"
            }
          },
          "AddDashholidaysLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddDashholidaysLambdaVersionVASOZErSrAv6ThYov5lNHLlC3cFDI4snUlfwsAKNCk"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-AddDashholidaysLambdaFunctionQualifiedArn"
            }
          },
          "AddDashmetaDashdataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddDashmetaDashdataLambdaVersionc5ak9aJjCttM9cOew9B2Z1UsJbWY6xvI7P2mSTAMw"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-AddDashmetaDashdataLambdaFunctionQualifiedArn"
            }
          },
          "EodDashpricingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EodDashpricingLambdaVersionJyVjO5xMyjWwFzMSyGvY0oqseF2at5NCgvNk28peXM"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-EodDashpricingLambdaFunctionQualifiedArn"
            }
          },
          "SecurityDashpruningLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SecurityDashpruningLambdaVersionqb6Eh4WcmDrlzJPFtULmJaEP1y5huy0USsGKcqR3U"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-SecurityDashpruningLambdaFunctionQualifiedArn"
            }
          },
          "IntradayDashpricingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IntradayDashpricingLambdaVersionfmNinRl7Txp11FTDmN4Vxbub6Xc0Y5TP4D2rQUFp4KI"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-IntradayDashpricingLambdaFunctionQualifiedArn"
            }
          },
          "CollectDashibkrDashtradesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectDashibkrDashtradesLambdaVersionAQ1a11T8MntnEvX0otATZKqqGk3ZHzZViQ7FlUmTfpQ"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-CollectDashibkrDashtradesLambdaFunctionQualifiedArn"
            }
          },
          "CollectDashtradesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectDashtradesLambdaVersioni04zawW6RIw5xjDsUNLx6aKXIvQ9ko5tJoSbZ1WeSo"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-CollectDashtradesLambdaFunctionQualifiedArn"
            }
          },
          "SpotifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotifyLambdaVersionHk2h3P3TsBTzmBI6wq25tnqVczj7vdjRhHXi3EGp4M"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-SpotifyLambdaFunctionQualifiedArn"
            }
          },
          "YoutubeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "YoutubeLambdaVersionoADrdtjvApkLVb1tnb3fJBOtHWguFr16VT9GVseG8"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-YoutubeLambdaFunctionQualifiedArn"
            }
          },
          "SubstackLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubstackLambdaVersionEn5sV226l19ryJPAhCmQtqA8ehTYX7TnJw5177kc"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-SubstackLambdaFunctionQualifiedArn"
            }
          },
          "TwitterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TwitterLambdaVersioneJuB47xlvgBeHiRNhgukX9iKcrEqbsfKUR76Pbwwvt4"
            },
            "Export": {
              "Name": "sls-tradingpost-job-production-TwitterLambdaFunctionQualifiedArn"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "prune": {
        "automatic": true,
        "number": 1
      },
      "esbuild": {
        "platform": "node",
        "target": "node16",
        "external": [
          "@sparticuz/chromium",
          "puppeteer-core"
        ],
        "exclude": [
          "pg-native"
        ]
      }
    },
    "plugins": [
      "serverless-prune-plugin",
      "serverless-esbuild"
    ],
    "pluginsData": {},
    "functions": {
      "collect-ibkr-trades": {
        "handler": "brokerage/collect-ibkr-trades.handler",
        "description": "Collects Ibkr Trades",
        "logRetentionInDays": 14,
        "timeout": 900,
        "memorySize": 1024,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(*/10 * ? * MON-FRI *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-collect-ibkr-trades",
        "package": {
          "artifact": ".serverless/collect-ibkr-trades.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CollectDashibkrDashtradesLambdaVersionAQ1a11T8MntnEvX0otATZKqqGk3ZHzZViQ7FlUmTfpQ"
      },
      "collect-trades": {
        "handler": "brokerage/collect-trades.handler",
        "description": "Collects Finicity Trades Daily",
        "logRetentionInDays": 14,
        "timeout": 900,
        "memorySize": 512,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(0 11 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-collect-trades",
        "package": {
          "artifact": ".serverless/collect-trades.zip"
        },
        "memory": 512,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CollectDashtradesLambdaVersioni04zawW6RIw5xjDsUNLx6aKXIvQ9ko5tJoSbZ1WeSo"
      },
      "add-meta-data": {
        "handler": "market-data/add-meta-data.run",
        "description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing",
        "logRetentionInDays": 14,
        "timeout": 900,
        "memorySize": 1024,
        "reservedConcurrency": 1,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(20 20 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(20 19 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(0 12 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(0 11 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-add-meta-data",
        "package": {
          "artifact": ".serverless/add-meta-data.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "AddDashmetaDashdataLambdaVersionc5ak9aJjCttM9cOew9B2Z1UsJbWY6xvI7P2mSTAMw"
      },
      "add-holidays": {
        "handler": "market-data/add-holidays.run",
        "description": "Ingests market holidays once a year",
        "logRetentionInDays": 14,
        "timeout": 300,
        "reservedConcurrency": 1,
        "memorySize": 1024,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(0 0 1 1 ? *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-add-holidays",
        "package": {
          "artifact": ".serverless/add-holidays.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "AddDashholidaysLambdaVersionVASOZErSrAv6ThYov5lNHLlC3cFDI4snUlfwsAKNCk"
      },
      "intraday-pricing": {
        "handler": "market-data/intraday-pricing.run",
        "description": "Ingests intraday pricing",
        "logRetentionInDays": 14,
        "timeout": 600,
        "reservedConcurrency": 1,
        "memorySize": 1024,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(* 12-20 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(2 20 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-intraday-pricing",
        "package": {
          "artifact": ".serverless/intraday-pricing.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "IntradayDashpricingLambdaVersionfmNinRl7Txp11FTDmN4Vxbub6Xc0Y5TP4D2rQUFp4KI"
      },
      "eod-pricing": {
        "handler": "market-data/eod-pricing.run",
        "description": "Ingests pricing for securities after market close & allow for 15min delay to kick in",
        "logRetentionInDays": 14,
        "timeout": 600,
        "reservedConcurrency": 1,
        "memorySize": 1024,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(20 20 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(20 19 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-eod-pricing",
        "package": {
          "artifact": ".serverless/eod-pricing.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "EodDashpricingLambdaVersionJyVjO5xMyjWwFzMSyGvY0oqseF2at5NCgvNk28peXM"
      },
      "security-pruning": {
        "handler": "market-data/security-pruning.run",
        "description": "Prunes security data",
        "reservedConcurrency": 1,
        "logRetentionInDays": 14,
        "timeout": 600,
        "memorySize": 1024,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(0 7 ? * MON-FRI *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-security-pruning",
        "package": {
          "artifact": ".serverless/security-pruning.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "SecurityDashpruningLambdaVersionqb6Eh4WcmDrlzJPFtULmJaEP1y5huy0USsGKcqR3U"
      },
      "spotify": {
        "handler": "social-media/spotify.run",
        "description": "Ingests Spotify User Data",
        "logRetentionInDays": 14,
        "timeout": 600,
        "memorySize": 1024,
        "reservedConcurrency": 1,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(0 11 ? * MON-SUN *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(0 23 ? * MON-SUN *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-spotify",
        "package": {
          "artifact": ".serverless/spotify.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "SpotifyLambdaVersionHk2h3P3TsBTzmBI6wq25tnqVczj7vdjRhHXi3EGp4M"
      },
      "substack": {
        "handler": "social-media/substack.run",
        "description": "Ingests Substack Data",
        "logRetentionInDays": 14,
        "timeout": 900,
        "memorySize": 1600,
        "reservedConcurrency": 1,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(0 11 ? * MON-SUN *)"
              ],
              "enabled": true
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(0 23 ? * MON-SUN *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-substack",
        "package": {
          "artifact": ".serverless/substack.zip"
        },
        "memory": 1600,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "SubstackLambdaVersionEn5sV226l19ryJPAhCmQtqA8ehTYX7TnJw5177kc"
      },
      "twitter": {
        "handler": "social-media/twitter.run",
        "description": "Ingests Twitter Data",
        "logRetentionInDays": 14,
        "timeout": 900,
        "memorySize": 1600,
        "reservedConcurrency": 0,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(*/10 * ? * MON-SUN *)"
              ],
              "enabled": false
            }
          }
        ],
        "name": "tradingpost-job-production-twitter",
        "package": {
          "artifact": ".serverless/twitter.zip"
        },
        "memory": 1600,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "TwitterLambdaVersioneJuB47xlvgBeHiRNhgukX9iKcrEqbsfKUR76Pbwwvt4"
      },
      "youtube": {
        "handler": "social-media/youtube.run",
        "description": "Ingests YouTube User Data",
        "logRetentionInDays": 14,
        "timeout": 600,
        "memorySize": 1024,
        "reservedConcurrency": 1,
        "events": [
          {
            "schedule": {
              "rate": [
                "cron(0 11 ? * MON-SUN *)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "tradingpost-job-production-youtube",
        "package": {
          "artifact": ".serverless/youtube.zip"
        },
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "YoutubeLambdaVersionoADrdtjvApkLVb1tnb3fJBOtHWguFr16VT9GVseG8"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "tradingpost-job",
      "app": "tradingpost-app",
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "individually": true,
        "artifactsS3KeyDirname": "serverless/tradingpost-job/production/code-artifacts"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "app": "tradingpost-app",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/tradingpost-job/production/1669159373628-2022-11-22T23:22:53.628Z",
    "artifact": ""
  }
}