{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GenerateDashrobinhoodDashtasksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-generate-robinhood-tasks",
        "RetentionInDays": 14
      }
    },
    "BrokerageDashtaskDashrunnerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-brokerage-task-runner",
        "RetentionInDays": 14
      }
    },
    "AddDashmetaDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-add-meta-data",
        "RetentionInDays": 14
      }
    },
    "AddDashholidaysLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-add-holidays",
        "RetentionInDays": 14
      }
    },
    "IntradayDashpricingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-intraday-pricing",
        "RetentionInDays": 14
      }
    },
    "EodDashpricingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-eod-pricing",
        "RetentionInDays": 14
      }
    },
    "SecurityDashpruningLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-security-pruning",
        "RetentionInDays": 14
      }
    },
    "SpotifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-spotify",
        "RetentionInDays": 14
      }
    },
    "SubstackLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-substack",
        "RetentionInDays": 14
      }
    },
    "TwitterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-twitter",
        "RetentionInDays": 14
      }
    },
    "YoutubeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-youtube",
        "RetentionInDays": 14
      }
    },
    "GenerateDashrobinhoodDashtasksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/generate-robinhood-tasks.zip"
        },
        "Handler": "brokerage/generate-robinhood-tasks.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-generate-robinhood-tasks",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Generates tasks for brokerage to process",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "GenerateDashrobinhoodDashtasksLogGroup"
      ]
    },
    "BrokerageDashtaskDashrunnerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/brokerage-task-runner.zip"
        },
        "Handler": "brokerage/task-runner.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-brokerage-task-runner",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Runs brokerage tasks that are pushed to SQS queue -- rather than on cadence",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "BrokerageDashtaskDashrunnerLogGroup"
      ]
    },
    "AddDashmetaDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/add-meta-data.zip"
        },
        "Handler": "market-data/add-meta-data.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-add-meta-data",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "AddDashmetaDashdataLogGroup"
      ]
    },
    "AddDashholidaysLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/add-holidays.zip"
        },
        "Handler": "market-data/add-holidays.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-add-holidays",
        "MemorySize": 1024,
        "Timeout": 300,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests market holidays once a year",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "AddDashholidaysLogGroup"
      ]
    },
    "IntradayDashpricingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/intraday-pricing.zip"
        },
        "Handler": "market-data/intraday-pricing.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-intraday-pricing",
        "MemorySize": 2048,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests intraday pricing",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "IntradayDashpricingLogGroup"
      ]
    },
    "EodDashpricingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/eod-pricing.zip"
        },
        "Handler": "market-data/eod-pricing.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-eod-pricing",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "EodDashpricingLogGroup"
      ]
    },
    "SecurityDashpruningLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/security-pruning.zip"
        },
        "Handler": "market-data/security-pruning.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-security-pruning",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Prunes security data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SecurityDashpruningLogGroup"
      ]
    },
    "SpotifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/spotify.zip"
        },
        "Handler": "social-media/spotify.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-spotify",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Spotify User Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SpotifyLogGroup"
      ]
    },
    "SubstackLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/substack.zip"
        },
        "Handler": "social-media/substack.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-substack",
        "MemorySize": 1600,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Substack Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SubstackLogGroup"
      ]
    },
    "TwitterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/twitter.zip"
        },
        "Handler": "social-media/twitter.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-twitter",
        "MemorySize": 1600,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Twitter Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "TwitterLogGroup"
      ]
    },
    "YoutubeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1675693386310-2023-02-06T14:23:06.310Z/youtube.zip"
        },
        "Handler": "social-media/youtube.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-youtube",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests YouTube User Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "YoutubeLogGroup"
      ]
    },
    "GenerateDashrobinhoodDashtasksLambdaVersionCQUcjsM1DyGMv8rRthVMXxnI8qvJZiPsVsSUdbZEAY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateDashrobinhoodDashtasksLambdaFunction"
        },
        "CodeSha256": "Wy/cb2QfpyWuwetCWzhxPor9u24Q4TTivYtyWqppq7w=",
        "Description": "Generates tasks for brokerage to process"
      }
    },
    "AddDashmetaDashdataLambdaVersion4jIQwwS8U2Ch3q1LF5MA3gtzfjDHPnIssunaY5GDy4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddDashmetaDashdataLambdaFunction"
        },
        "CodeSha256": "Fw9ok4MOFpkEvG3l/f+EclcPujOhbEDOroGmWTCBuqo=",
        "Description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing"
      }
    },
    "AddDashholidaysLambdaVersionqCdlEAsjU0eLXoV7SAcFjLvU4Sn43UO4YUc36dzo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddDashholidaysLambdaFunction"
        },
        "CodeSha256": "UToLPjY+uqMXo5eoeN/bbJbZyc9UGbvC2nPkSS+8CRE=",
        "Description": "Ingests market holidays once a year"
      }
    },
    "IntradayDashpricingLambdaVersionYJFndwoCzJX2GApfKHQgHXbjQnwTCyMCeAcBKc89IE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IntradayDashpricingLambdaFunction"
        },
        "CodeSha256": "qRo8k/8rBjJguiQT+nBukkzl339igndblwi9j/Yp5sk=",
        "Description": "Ingests intraday pricing"
      }
    },
    "SecurityDashpruningLambdaVersionCKeFyqoBWHZtQrf9HrPMIFXdChuw5tV4g79cRfaK8E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SecurityDashpruningLambdaFunction"
        },
        "CodeSha256": "VcYPBXnB41W/BdKh5SMmQPNXsjb5L/PKnCSVgP8aPB8=",
        "Description": "Prunes security data"
      }
    },
    "EodDashpricingLambdaVersionsSDIXWsFee8rCrN2R1QXxWAl43vtAJjeBUxNXbxEc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EodDashpricingLambdaFunction"
        },
        "CodeSha256": "ySsdT79K71uRWtt3N+bKneZ91WDIG9i0+cfBUYxnbtI=",
        "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in"
      }
    },
    "SpotifyLambdaVersionDOpqZvYNSveVZ1WFiuXPZfPPtv1KAzwRSRod8oSQc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotifyLambdaFunction"
        },
        "CodeSha256": "fKgrYrySvj4mt2B0d3Z33Tmsuy/VFE4yi/TiO4jsp8g=",
        "Description": "Ingests Spotify User Data"
      }
    },
    "YoutubeLambdaVersionByasRxWxVZMXkzyX6GDQBBRIvGja76NTRuWPrw4ev2s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "YoutubeLambdaFunction"
        },
        "CodeSha256": "vvpmod42qcnnRItbjdEO8FPM/7CE/SYFlIjKW4tHS2o=",
        "Description": "Ingests YouTube User Data"
      }
    },
    "BrokerageDashtaskDashrunnerLambdaVersionlxUDw3R3tXRNlgG50xW5FdMVFxnoC6hKlhBTlmH8vsg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BrokerageDashtaskDashrunnerLambdaFunction"
        },
        "CodeSha256": "TA/oZmIUP9Jc9P4pSMMeXLRoYfKqo/UXhd+9ISxH6jE=",
        "Description": "Runs brokerage tasks that are pushed to SQS queue -- rather than on cadence"
      }
    },
    "TwitterLambdaVersionLXqmYDUU3GuaHzYk94NpJd39qW16tzK3mTv8HSpsp4k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TwitterLambdaFunction"
        },
        "CodeSha256": "oR9DcSzVjLwTt20/1l/AASkxxP1SxpFzcNMiKH3/Qi0=",
        "Description": "Ingests Twitter Data"
      }
    },
    "SubstackLambdaVersionlRANYp5idx9IWNudUKcDeimVz5ghBZEQ6VUmhZ2twY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubstackLambdaFunction"
        },
        "CodeSha256": "f9KdROStMQS5SpLJoZFcJ7TFhWk9ErKqB0DOTuZp3Tg=",
        "Description": "Ingests Substack Data"
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule3": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 12 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule3",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule4": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule4": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule4",
            "Arn"
          ]
        }
      }
    },
    "AddDashholidaysEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 0 1 1 ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashholidaysLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-holidaysSchedule"
          }
        ]
      }
    },
    "AddDashholidaysLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashholidaysLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashholidaysEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "IntradayDashpricingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(* 12-20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "IntradayDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "intraday-pricingSchedule"
          }
        ]
      }
    },
    "IntradayDashpricingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IntradayDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "IntradayDashpricingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "EodDashpricingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EodDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "eod-pricingSchedule"
          }
        ]
      }
    },
    "EodDashpricingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EodDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EodDashpricingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "EodDashpricingEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EodDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "eod-pricingSchedule"
          }
        ]
      }
    },
    "EodDashpricingLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EodDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EodDashpricingEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SecurityDashpruningEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 7 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SecurityDashpruningLambdaFunction",
                "Arn"
              ]
            },
            "Id": "security-pruningSchedule"
          }
        ]
      }
    },
    "SecurityDashpruningLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SecurityDashpruningLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SecurityDashpruningEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SpotifyEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SpotifyLambdaFunction",
                "Arn"
              ]
            },
            "Id": "spotifySchedule"
          }
        ]
      }
    },
    "SpotifyLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpotifyEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SpotifyEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SpotifyLambdaFunction",
                "Arn"
              ]
            },
            "Id": "spotifySchedule"
          }
        ]
      }
    },
    "SpotifyLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpotifyEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SubstackEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SubstackLambdaFunction",
                "Arn"
              ]
            },
            "Id": "substackSchedule"
          }
        ]
      }
    },
    "SubstackLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubstackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SubstackEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SubstackEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SubstackLambdaFunction",
                "Arn"
              ]
            },
            "Id": "substackSchedule"
          }
        ]
      }
    },
    "SubstackLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubstackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SubstackEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "TwitterEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(*/1 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "TwitterLambdaFunction",
                "Arn"
              ]
            },
            "Id": "twitterSchedule"
          }
        ]
      }
    },
    "TwitterLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TwitterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "TwitterEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "YoutubeEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "YoutubeLambdaFunction",
                "Arn"
              ]
            },
            "Id": "youtubeSchedule"
          }
        ]
      }
    },
    "YoutubeLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "YoutubeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "YoutubeEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "BrokerageDashtaskDashrunnerEventSourceMappingSQSBrokeragetaskqueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": "arn:aws:sqs:us-east-1:670171407375:brokerage-task-queue",
        "FunctionName": {
          "Fn::GetAtt": [
            "BrokerageDashtaskDashrunnerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-ServerlessDeploymentBucketName"
      }
    },
    "GenerateDashrobinhoodDashtasksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateDashrobinhoodDashtasksLambdaVersionCQUcjsM1DyGMv8rRthVMXxnI8qvJZiPsVsSUdbZEAY"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-GenerateDashrobinhoodDashtasksLambdaFunctionQualifiedArn"
      }
    },
    "AddDashmetaDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddDashmetaDashdataLambdaVersion4jIQwwS8U2Ch3q1LF5MA3gtzfjDHPnIssunaY5GDy4"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-AddDashmetaDashdataLambdaFunctionQualifiedArn"
      }
    },
    "AddDashholidaysLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddDashholidaysLambdaVersionqCdlEAsjU0eLXoV7SAcFjLvU4Sn43UO4YUc36dzo"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-AddDashholidaysLambdaFunctionQualifiedArn"
      }
    },
    "IntradayDashpricingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IntradayDashpricingLambdaVersionYJFndwoCzJX2GApfKHQgHXbjQnwTCyMCeAcBKc89IE"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-IntradayDashpricingLambdaFunctionQualifiedArn"
      }
    },
    "SecurityDashpruningLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SecurityDashpruningLambdaVersionCKeFyqoBWHZtQrf9HrPMIFXdChuw5tV4g79cRfaK8E"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SecurityDashpruningLambdaFunctionQualifiedArn"
      }
    },
    "EodDashpricingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EodDashpricingLambdaVersionsSDIXWsFee8rCrN2R1QXxWAl43vtAJjeBUxNXbxEc"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-EodDashpricingLambdaFunctionQualifiedArn"
      }
    },
    "SpotifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotifyLambdaVersionDOpqZvYNSveVZ1WFiuXPZfPPtv1KAzwRSRod8oSQc"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SpotifyLambdaFunctionQualifiedArn"
      }
    },
    "YoutubeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "YoutubeLambdaVersionByasRxWxVZMXkzyX6GDQBBRIvGja76NTRuWPrw4ev2s"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-YoutubeLambdaFunctionQualifiedArn"
      }
    },
    "BrokerageDashtaskDashrunnerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BrokerageDashtaskDashrunnerLambdaVersionlxUDw3R3tXRNlgG50xW5FdMVFxnoC6hKlhBTlmH8vsg"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-BrokerageDashtaskDashrunnerLambdaFunctionQualifiedArn"
      }
    },
    "TwitterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TwitterLambdaVersionLXqmYDUU3GuaHzYk94NpJd39qW16tzK3mTv8HSpsp4k"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-TwitterLambdaFunctionQualifiedArn"
      }
    },
    "SubstackLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubstackLambdaVersionlRANYp5idx9IWNudUKcDeimVz5ghBZEQ6VUmhZ2twY"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SubstackLambdaFunctionQualifiedArn"
      }
    }
  }
}