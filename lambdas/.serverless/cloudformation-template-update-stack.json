{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "HealthcheckLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-healthcheck",
        "RetentionInDays": 14
      }
    },
    "NotificationDashpostDashwatchlistsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-notification-post-watchlists",
        "RetentionInDays": 14
      }
    },
    "NotificationDashpostDashholdingsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-notification-post-holdings",
        "RetentionInDays": 14
      }
    },
    "NotificationDashnewDashtradesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-notification-new-trades",
        "RetentionInDays": 14
      }
    },
    "GenerateDashbrokerageDashtasksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-generate-brokerage-tasks",
        "RetentionInDays": 14
      }
    },
    "BrokerageDashtaskDashrunnerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-brokerage-task-runner",
        "RetentionInDays": 14
      }
    },
    "AddDashholidaysLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-add-holidays",
        "RetentionInDays": 14
      }
    },
    "EodDashpricingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-eod-pricing",
        "RetentionInDays": 14
      }
    },
    "IntradayDashpricingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-intraday-pricing",
        "RetentionInDays": 14
      }
    },
    "MorningDashpricingDashforwardLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-morning-pricing-forward",
        "RetentionInDays": 14
      }
    },
    "SecuritiesDashinformationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-securities-information",
        "RetentionInDays": 14
      }
    },
    "SecuritiesDashupdateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-securities-update",
        "RetentionInDays": 14
      }
    },
    "SecurityDashpruningLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-security-pruning",
        "RetentionInDays": 14
      }
    },
    "SpotifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-spotify",
        "RetentionInDays": 14
      }
    },
    "SubstackLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-substack",
        "RetentionInDays": 14
      }
    },
    "TwitterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-twitter",
        "RetentionInDays": 14
      }
    },
    "YoutubeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-youtube",
        "RetentionInDays": 14
      }
    },
    "HealthcheckLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/healthcheck.zip"
        },
        "Handler": "healthcheck/api.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-healthcheck",
        "MemorySize": 512,
        "Timeout": 10,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Healthcheck for the Api",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "HealthcheckLogGroup"
      ]
    },
    "NotificationDashpostDashwatchlistsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/notification-post-watchlists.zip"
        },
        "Handler": "notifications/post-watchlists.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-notification-post-watchlists",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Pulls posts related to watchlist symbols and sends a notification",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "NotificationDashpostDashwatchlistsLogGroup"
      ]
    },
    "NotificationDashpostDashholdingsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/notification-post-holdings.zip"
        },
        "Handler": "notifications/post-holdings.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-notification-post-holdings",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Pulls posts related to the holdings that users have when they've signed up with a brokerage account",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "NotificationDashpostDashholdingsLogGroup"
      ]
    },
    "NotificationDashnewDashtradesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/notification-new-trades.zip"
        },
        "Handler": "notifications/new-holdings.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-notification-new-trades",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Send a notification to a user who follows someone, and that someone has new holds/has made trades",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "NotificationDashnewDashtradesLogGroup"
      ]
    },
    "GenerateDashbrokerageDashtasksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/generate-brokerage-tasks.zip"
        },
        "Handler": "brokerage/generate-brokerage-tasks.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-generate-brokerage-tasks",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Generates tasks for brokerage to process",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "GenerateDashbrokerageDashtasksLogGroup"
      ]
    },
    "BrokerageDashtaskDashrunnerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/brokerage-task-runner.zip"
        },
        "Handler": "brokerage/task-runner.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-brokerage-task-runner",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Runs brokerage tasks that are pushed to SQS queue -- rather than on cadence",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "BrokerageDashtaskDashrunnerLogGroup"
      ]
    },
    "AddDashholidaysLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/add-holidays.zip"
        },
        "Handler": "market-data/add-holidays.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-add-holidays",
        "MemorySize": 1024,
        "Timeout": 300,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests market holidays once a year",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "AddDashholidaysLogGroup"
      ]
    },
    "EodDashpricingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/eod-pricing.zip"
        },
        "Handler": "market-data/eod-pricing.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-eod-pricing",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "EodDashpricingLogGroup"
      ]
    },
    "IntradayDashpricingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/intraday-pricing.zip"
        },
        "Handler": "market-data/intraday-pricing.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-intraday-pricing",
        "MemorySize": 2048,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests intraday pricing",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "IntradayDashpricingLogGroup"
      ]
    },
    "MorningDashpricingDashforwardLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/morning-pricing-forward.zip"
        },
        "Handler": "market-data/morning-pricing-rollover.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-morning-pricing-forward",
        "MemorySize": 2048,
        "Timeout": 300,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Roll yesterdays is_eod pricing forward, then let our IEX pricing dictate the rest",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "MorningDashpricingDashforwardLogGroup"
      ]
    },
    "SecuritiesDashinformationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/securities-information.zip"
        },
        "Handler": "market-data/securities-information.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-securities-information",
        "MemorySize": 2048,
        "Timeout": 300,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Runs every trading day at 5AM ET and updates securities information",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SecuritiesDashinformationLogGroup"
      ]
    },
    "SecuritiesDashupdateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/securities-update.zip"
        },
        "Handler": "market-data/securities-update.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-securities-update",
        "MemorySize": 2048,
        "Timeout": 300,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Pulls in new securities and data from IEX and pushes new data over ot our security table",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SecuritiesDashupdateLogGroup"
      ]
    },
    "SecurityDashpruningLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/security-pruning.zip"
        },
        "Handler": "market-data/security-pruning.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-security-pruning",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Prunes security data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SecurityDashpruningLogGroup"
      ]
    },
    "SpotifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/spotify.zip"
        },
        "Handler": "social-media/spotify.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-spotify",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Spotify User Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SpotifyLogGroup"
      ]
    },
    "SubstackLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/substack.zip"
        },
        "Handler": "social-media/substack.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-substack",
        "MemorySize": 1600,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Substack Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SubstackLogGroup"
      ]
    },
    "TwitterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/twitter.zip"
        },
        "Handler": "social-media/twitter.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-twitter",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Twitter Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "TwitterLogGroup"
      ]
    },
    "YoutubeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1684463951229-2023-05-19T02:39:11.229Z/youtube.zip"
        },
        "Handler": "social-media/youtube.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-youtube",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests YouTube User Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "YoutubeLogGroup"
      ]
    },
    "HealthcheckLambdaVersionV6Lmd9ByhahXhrHRUYjc6gkURNmPjZiVeWKzSzB3zs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HealthcheckLambdaFunction"
        },
        "CodeSha256": "s6MHiCbfBZA8Xv/QPOHP9MXw7wyRWJBZFLwgCPAm6KY=",
        "Description": "Healthcheck for the Api"
      }
    },
    "SecuritiesDashupdateLambdaVersionO6DTbqPyoQTMieGuR9o2GsKrbgQDNpQxRuQ1sSp9j8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SecuritiesDashupdateLambdaFunction"
        },
        "CodeSha256": "GSfUoiD1wcPJM9+ENEqTFjwJiN7Ys7y4wBjFUeGb4i0=",
        "Description": "Pulls in new securities and data from IEX and pushes new data over ot our security table"
      }
    },
    "SecurityDashpruningLambdaVersioneAEPdpX8qUMKyd5t34uHk2R1DnBte6NDVrXCTHKKWhU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SecurityDashpruningLambdaFunction"
        },
        "CodeSha256": "aZZTRSqiwrYEz/xarSMDLmqgdHYGKEKZvN4HkGkY7/g=",
        "Description": "Prunes security data"
      }
    },
    "SpotifyLambdaVersioneTDgPCdNIMQjF73QjCgoI2K9ODkZELsuCplyzfQVA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotifyLambdaFunction"
        },
        "CodeSha256": "aWIRGx/snss+n6oWaVTrt84IzRCXK3b1xD8L1NLZ50E=",
        "Description": "Ingests Spotify User Data"
      }
    },
    "YoutubeLambdaVersion49s56zjplAq7Pt5DbgbkmJkZG9YcAik0y9B1npq80": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "YoutubeLambdaFunction"
        },
        "CodeSha256": "5X+w+oIzJIH52DelRQwAzo3AHKpZvQ+5ZNMrsXCfW9w=",
        "Description": "Ingests YouTube User Data"
      }
    },
    "AddDashholidaysLambdaVersionq44cJMukgi1CgkBkUhdf5cBRMIcSeFBOsDBG9z9I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddDashholidaysLambdaFunction"
        },
        "CodeSha256": "7WM4LtU+QQXC/LTKkE59XLjwqr2ngH+I7ICxZRQp5Es=",
        "Description": "Ingests market holidays once a year"
      }
    },
    "GenerateDashbrokerageDashtasksLambdaVersiondql75R5ETvt3WUSUnyjktmYlvmD83lSpHz1XVMxls": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateDashbrokerageDashtasksLambdaFunction"
        },
        "CodeSha256": "kYuNp8I7AoZwsxPFOMazXqE0SB0MIip5gmwQP1mL1xk=",
        "Description": "Generates tasks for brokerage to process"
      }
    },
    "IntradayDashpricingLambdaVersion0GZDFAzj7thDq4rFcI7qnRlwaK4Gt9Hb3zidOzcWUY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IntradayDashpricingLambdaFunction"
        },
        "CodeSha256": "Yd8y1o9CUjHY2ZhN92eo6BZ1M9mHfYgmpyjv2IjK7TE=",
        "Description": "Ingests intraday pricing"
      }
    },
    "MorningDashpricingDashforwardLambdaVersionCimotvxpIoFd9s5AGcGoRrJXzBITMYT8V47TPwrpFj0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MorningDashpricingDashforwardLambdaFunction"
        },
        "CodeSha256": "8puWgqOvTLFYoP9Xr33oGVq/HiAVvYvarjI3UK0k9vQ=",
        "Description": "Roll yesterdays is_eod pricing forward, then let our IEX pricing dictate the rest"
      }
    },
    "SecuritiesDashinformationLambdaVersion2Hvi1Gx8VRDbj7fV5SsKvu9RRC0wzaOtrIrQsnKbUE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SecuritiesDashinformationLambdaFunction"
        },
        "CodeSha256": "BvaVxyjzdzMU63irvEkTid4w5oqGsu9lIx7zMWkqOg8=",
        "Description": "Runs every trading day at 5AM ET and updates securities information"
      }
    },
    "EodDashpricingLambdaVersion01AtreXgUQWRioZmBQ86cj79Iy4Flf0N73CDqkPWUE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EodDashpricingLambdaFunction"
        },
        "CodeSha256": "SGuo8MQCFfclRYOpXNmZ8ntr8ngSVHgbVnfPME+di1U=",
        "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in"
      }
    },
    "BrokerageDashtaskDashrunnerLambdaVersionqjMVsH7vhImCZzhAJVGrYHws4BWgGabhm0r0Wk89MSg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BrokerageDashtaskDashrunnerLambdaFunction"
        },
        "CodeSha256": "xz5XWNR1J3E8O3O3NQ+oQVXLpze/J/+cAHbplI2fyDA=",
        "Description": "Runs brokerage tasks that are pushed to SQS queue -- rather than on cadence"
      }
    },
    "NotificationDashpostDashwatchlistsLambdaVersionriwwQlif6qUBWZhNQxoynXenblZ5RwxJM6zCTblyc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotificationDashpostDashwatchlistsLambdaFunction"
        },
        "CodeSha256": "u1pZQRtKu3WgvKAsXR0Na1X9RsNHHXfLQMYOhU5aZ/A=",
        "Description": "Pulls posts related to watchlist symbols and sends a notification"
      }
    },
    "NotificationDashpostDashholdingsLambdaVersionpbKSLxHFYhzEid0TyydgLYi4TnMFGSBeqiRPkagjo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotificationDashpostDashholdingsLambdaFunction"
        },
        "CodeSha256": "ddiNbHJLmjmZhNwnBHAXK2EQ7XKvhzCrm0TRjNlEiCE=",
        "Description": "Pulls posts related to the holdings that users have when they've signed up with a brokerage account"
      }
    },
    "NotificationDashnewDashtradesLambdaVersionQjTUqx4hB0WqnP4kk750h1C5cRPfT5wTX5QtG6ASWo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotificationDashnewDashtradesLambdaFunction"
        },
        "CodeSha256": "+3If2JAgLsOFM5qSoQ7RBHKSQAEIBYJkQKUOGpL7k8o=",
        "Description": "Send a notification to a user who follows someone, and that someone has new holds/has made trades"
      }
    },
    "TwitterLambdaVersionnvwBwqlab5DKjmGnsls2nHi0rBk8wKDr8UHy1nizs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TwitterLambdaFunction"
        },
        "CodeSha256": "op61ya7DQsKQ9EVI7t497uHewrdteiNXpFrzz6YsOhY=",
        "Description": "Ingests Twitter Data"
      }
    },
    "SubstackLambdaVersionpbG9ipBbwYIoUIscLweGP5SlEDHFtXARDO2HbYUlCL8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubstackLambdaFunction"
        },
        "CodeSha256": "k7uzC1tk6UflBvMghRNX0cZkpca3qbmbVb6SAMcY2Zw=",
        "Description": "Ingests Substack Data"
      }
    },
    "HealthcheckEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0/1 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "HealthcheckLambdaFunction",
                "Arn"
              ]
            },
            "Id": "healthcheckSchedule"
          }
        ]
      }
    },
    "HealthcheckLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HealthcheckLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "HealthcheckEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "NotificationDashpostDashwatchlistsEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 13 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NotificationDashpostDashwatchlistsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "notification-post-watchlistsSchedule"
          }
        ]
      }
    },
    "NotificationDashpostDashwatchlistsLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationDashpostDashwatchlistsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "NotificationDashpostDashwatchlistsEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "NotificationDashpostDashwatchlistsEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 1 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NotificationDashpostDashwatchlistsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "notification-post-watchlistsSchedule"
          }
        ]
      }
    },
    "NotificationDashpostDashwatchlistsLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationDashpostDashwatchlistsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "NotificationDashpostDashwatchlistsEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "NotificationDashpostDashholdingsEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 13 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NotificationDashpostDashholdingsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "notification-post-holdingsSchedule"
          }
        ]
      }
    },
    "NotificationDashpostDashholdingsLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationDashpostDashholdingsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "NotificationDashpostDashholdingsEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "NotificationDashpostDashholdingsEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 1 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NotificationDashpostDashholdingsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "notification-post-holdingsSchedule"
          }
        ]
      }
    },
    "NotificationDashpostDashholdingsLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationDashpostDashholdingsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "NotificationDashpostDashholdingsEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "NotificationDashnewDashtradesEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 13 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NotificationDashnewDashtradesLambdaFunction",
                "Arn"
              ]
            },
            "Id": "notification-new-tradesSchedule"
          }
        ]
      }
    },
    "NotificationDashnewDashtradesLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationDashnewDashtradesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "NotificationDashnewDashtradesEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "GenerateDashbrokerageDashtasksEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "GenerateDashbrokerageDashtasksLambdaFunction",
                "Arn"
              ]
            },
            "Id": "generate-brokerage-tasksSchedule"
          }
        ]
      }
    },
    "GenerateDashbrokerageDashtasksLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateDashbrokerageDashtasksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "GenerateDashbrokerageDashtasksEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "GenerateDashbrokerageDashtasksEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 10 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "GenerateDashbrokerageDashtasksLambdaFunction",
                "Arn"
              ]
            },
            "Id": "generate-brokerage-tasksSchedule"
          }
        ]
      }
    },
    "GenerateDashbrokerageDashtasksLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateDashbrokerageDashtasksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "GenerateDashbrokerageDashtasksEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "AddDashholidaysEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 0 1 1 ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashholidaysLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-holidaysSchedule"
          }
        ]
      }
    },
    "AddDashholidaysLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashholidaysLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashholidaysEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "EodDashpricingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EodDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "eod-pricingSchedule"
          }
        ]
      }
    },
    "EodDashpricingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EodDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EodDashpricingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "EodDashpricingEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EodDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "eod-pricingSchedule"
          }
        ]
      }
    },
    "EodDashpricingLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EodDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EodDashpricingEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "IntradayDashpricingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(* 12-20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "IntradayDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "intraday-pricingSchedule"
          }
        ]
      }
    },
    "IntradayDashpricingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IntradayDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "IntradayDashpricingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "MorningDashpricingDashforwardEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(28 13 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "MorningDashpricingDashforwardLambdaFunction",
                "Arn"
              ]
            },
            "Id": "morning-pricing-forwardSchedule"
          }
        ]
      }
    },
    "MorningDashpricingDashforwardLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MorningDashpricingDashforwardLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "MorningDashpricingDashforwardEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "MorningDashpricingDashforwardEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(28 12 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "MorningDashpricingDashforwardLambdaFunction",
                "Arn"
              ]
            },
            "Id": "morning-pricing-forwardSchedule"
          }
        ]
      }
    },
    "MorningDashpricingDashforwardLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MorningDashpricingDashforwardLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "MorningDashpricingDashforwardEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SecuritiesDashinformationEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 9 ? * TUES-SAT *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SecuritiesDashinformationLambdaFunction",
                "Arn"
              ]
            },
            "Id": "securities-informationSchedule"
          }
        ]
      }
    },
    "SecuritiesDashinformationLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SecuritiesDashinformationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SecuritiesDashinformationEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SecuritiesDashinformationEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 8 ? * TUES-SAT *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SecuritiesDashinformationLambdaFunction",
                "Arn"
              ]
            },
            "Id": "securities-informationSchedule"
          }
        ]
      }
    },
    "SecuritiesDashinformationLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SecuritiesDashinformationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SecuritiesDashinformationEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SecuritiesDashupdateEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 5 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SecuritiesDashupdateLambdaFunction",
                "Arn"
              ]
            },
            "Id": "securities-updateSchedule"
          }
        ]
      }
    },
    "SecuritiesDashupdateLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SecuritiesDashupdateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SecuritiesDashupdateEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SecurityDashpruningEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 7 ? * MON-SAT *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SecurityDashpruningLambdaFunction",
                "Arn"
              ]
            },
            "Id": "security-pruningSchedule"
          }
        ]
      }
    },
    "SecurityDashpruningLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SecurityDashpruningLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SecurityDashpruningEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SpotifyEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SpotifyLambdaFunction",
                "Arn"
              ]
            },
            "Id": "spotifySchedule"
          }
        ]
      }
    },
    "SpotifyLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpotifyEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SpotifyEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SpotifyLambdaFunction",
                "Arn"
              ]
            },
            "Id": "spotifySchedule"
          }
        ]
      }
    },
    "SpotifyLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpotifyEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SubstackEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SubstackLambdaFunction",
                "Arn"
              ]
            },
            "Id": "substackSchedule"
          }
        ]
      }
    },
    "SubstackLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubstackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SubstackEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SubstackEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SubstackLambdaFunction",
                "Arn"
              ]
            },
            "Id": "substackSchedule"
          }
        ]
      }
    },
    "SubstackLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubstackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SubstackEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "TwitterEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(*/1 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "TwitterLambdaFunction",
                "Arn"
              ]
            },
            "Id": "twitterSchedule"
          }
        ]
      }
    },
    "TwitterLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TwitterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "TwitterEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "YoutubeEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "YoutubeLambdaFunction",
                "Arn"
              ]
            },
            "Id": "youtubeSchedule"
          }
        ]
      }
    },
    "YoutubeLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "YoutubeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "YoutubeEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "BrokerageDashtaskDashrunnerEventSourceMappingSQSBrokeragetaskqueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": "arn:aws:sqs:us-east-1:670171407375:brokerage-task-queue",
        "FunctionName": {
          "Fn::GetAtt": [
            "BrokerageDashtaskDashrunnerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-ServerlessDeploymentBucketName"
      }
    },
    "HealthcheckLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HealthcheckLambdaVersionV6Lmd9ByhahXhrHRUYjc6gkURNmPjZiVeWKzSzB3zs"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-HealthcheckLambdaFunctionQualifiedArn"
      }
    },
    "SecuritiesDashupdateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SecuritiesDashupdateLambdaVersionO6DTbqPyoQTMieGuR9o2GsKrbgQDNpQxRuQ1sSp9j8"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SecuritiesDashupdateLambdaFunctionQualifiedArn"
      }
    },
    "SecurityDashpruningLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SecurityDashpruningLambdaVersioneAEPdpX8qUMKyd5t34uHk2R1DnBte6NDVrXCTHKKWhU"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SecurityDashpruningLambdaFunctionQualifiedArn"
      }
    },
    "SpotifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotifyLambdaVersioneTDgPCdNIMQjF73QjCgoI2K9ODkZELsuCplyzfQVA"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SpotifyLambdaFunctionQualifiedArn"
      }
    },
    "YoutubeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "YoutubeLambdaVersion49s56zjplAq7Pt5DbgbkmJkZG9YcAik0y9B1npq80"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-YoutubeLambdaFunctionQualifiedArn"
      }
    },
    "AddDashholidaysLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddDashholidaysLambdaVersionq44cJMukgi1CgkBkUhdf5cBRMIcSeFBOsDBG9z9I"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-AddDashholidaysLambdaFunctionQualifiedArn"
      }
    },
    "GenerateDashbrokerageDashtasksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateDashbrokerageDashtasksLambdaVersiondql75R5ETvt3WUSUnyjktmYlvmD83lSpHz1XVMxls"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-GenerateDashbrokerageDashtasksLambdaFunctionQualifiedArn"
      }
    },
    "IntradayDashpricingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IntradayDashpricingLambdaVersion0GZDFAzj7thDq4rFcI7qnRlwaK4Gt9Hb3zidOzcWUY"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-IntradayDashpricingLambdaFunctionQualifiedArn"
      }
    },
    "MorningDashpricingDashforwardLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MorningDashpricingDashforwardLambdaVersionCimotvxpIoFd9s5AGcGoRrJXzBITMYT8V47TPwrpFj0"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-MorningDashpricingDashforwardLambdaFunctionQualifiedArn"
      }
    },
    "SecuritiesDashinformationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SecuritiesDashinformationLambdaVersion2Hvi1Gx8VRDbj7fV5SsKvu9RRC0wzaOtrIrQsnKbUE"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SecuritiesDashinformationLambdaFunctionQualifiedArn"
      }
    },
    "EodDashpricingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EodDashpricingLambdaVersion01AtreXgUQWRioZmBQ86cj79Iy4Flf0N73CDqkPWUE"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-EodDashpricingLambdaFunctionQualifiedArn"
      }
    },
    "BrokerageDashtaskDashrunnerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BrokerageDashtaskDashrunnerLambdaVersionqjMVsH7vhImCZzhAJVGrYHws4BWgGabhm0r0Wk89MSg"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-BrokerageDashtaskDashrunnerLambdaFunctionQualifiedArn"
      }
    },
    "NotificationDashpostDashwatchlistsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotificationDashpostDashwatchlistsLambdaVersionriwwQlif6qUBWZhNQxoynXenblZ5RwxJM6zCTblyc"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-NotificationDashpostDashwatchlistsLambdaFunctionQualifiedArn"
      }
    },
    "NotificationDashpostDashholdingsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotificationDashpostDashholdingsLambdaVersionpbKSLxHFYhzEid0TyydgLYi4TnMFGSBeqiRPkagjo"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-NotificationDashpostDashholdingsLambdaFunctionQualifiedArn"
      }
    },
    "NotificationDashnewDashtradesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotificationDashnewDashtradesLambdaVersionQjTUqx4hB0WqnP4kk750h1C5cRPfT5wTX5QtG6ASWo"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-NotificationDashnewDashtradesLambdaFunctionQualifiedArn"
      }
    },
    "TwitterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TwitterLambdaVersionnvwBwqlab5DKjmGnsls2nHi0rBk8wKDr8UHy1nizs"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-TwitterLambdaFunctionQualifiedArn"
      }
    },
    "SubstackLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubstackLambdaVersionpbG9ipBbwYIoUIscLweGP5SlEDHFtXARDO2HbYUlCL8"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SubstackLambdaFunctionQualifiedArn"
      }
    }
  }
}