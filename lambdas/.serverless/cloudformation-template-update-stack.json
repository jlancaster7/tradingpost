{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CollectDashtradesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-collect-trades",
        "RetentionInDays": 14
      }
    },
    "AddDashmetaDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-add-meta-data",
        "RetentionInDays": 14
      }
    },
    "AddDashholidaysLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-add-holidays",
        "RetentionInDays": 14
      }
    },
    "IntradayDashpricingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-intraday-pricing",
        "RetentionInDays": 14
      }
    },
    "EodDashpricingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-eod-pricing",
        "RetentionInDays": 14
      }
    },
    "SecurityDashpruningLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-security-pruning",
        "RetentionInDays": 14
      }
    },
    "SpotifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-spotify",
        "RetentionInDays": 14
      }
    },
    "SubstackLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-substack",
        "RetentionInDays": 14
      }
    },
    "TwitterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-twitter",
        "RetentionInDays": 14
      }
    },
    "YoutubeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tradingpost-job-production-youtube",
        "RetentionInDays": 14
      }
    },
    "CollectDashtradesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/collect-trades.zip"
        },
        "Handler": "brokerage/collect-trades.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-collect-trades",
        "MemorySize": 512,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Collects Finicity Trades Daily",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        }
      },
      "DependsOn": [
        "CollectDashtradesLogGroup"
      ]
    },
    "AddDashmetaDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/add-meta-data.zip"
        },
        "Handler": "market-data/add-meta-data.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-add-meta-data",
        "MemorySize": 1024,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "AddDashmetaDashdataLogGroup"
      ]
    },
    "AddDashholidaysLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/add-holidays.zip"
        },
        "Handler": "market-data/add-holidays.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-add-holidays",
        "MemorySize": 1024,
        "Timeout": 300,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests market holidays once a year",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "AddDashholidaysLogGroup"
      ]
    },
    "IntradayDashpricingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/intraday-pricing.zip"
        },
        "Handler": "market-data/intraday-pricing.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-intraday-pricing",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests intraday pricing",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "IntradayDashpricingLogGroup"
      ]
    },
    "EodDashpricingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/eod-pricing.zip"
        },
        "Handler": "market-data/eod-pricing.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-eod-pricing",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "EodDashpricingLogGroup"
      ]
    },
    "SecurityDashpruningLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/security-pruning.zip"
        },
        "Handler": "market-data/security-pruning.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-security-pruning",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Prunes security data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SecurityDashpruningLogGroup"
      ]
    },
    "SpotifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/spotify.zip"
        },
        "Handler": "social-media/spotify.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-spotify",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Spotify User Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SpotifyLogGroup"
      ]
    },
    "SubstackLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/substack.zip"
        },
        "Handler": "social-media/substack.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-substack",
        "MemorySize": 1600,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Substack Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "SubstackLogGroup"
      ]
    },
    "TwitterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/twitter.zip"
        },
        "Handler": "social-media/twitter.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-twitter",
        "MemorySize": 1600,
        "Timeout": 900,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests Twitter Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "TwitterLogGroup"
      ]
    },
    "YoutubeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tradingpost-job/production/1664558053485-2022-09-30T17:14:13.485Z/youtube.zip"
        },
        "Handler": "social-media/youtube.run",
        "Runtime": "nodejs16.x",
        "FunctionName": "tradingpost-job-production-youtube",
        "MemorySize": 1024,
        "Timeout": 600,
        "Architectures": [
          "x86_64"
        ],
        "Description": "Ingests YouTube User Data",
        "Tags": [
          {
            "Key": "service",
            "Value": "tradingpost-background-job"
          }
        ],
        "Environment": {
          "Variables": {
            "CONFIGURATION_ENV": "production",
            "NODE_ENV": "production"
          }
        },
        "Role": "arn:aws:iam::670171407375:role/Basic-Lambda-Role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0f6d411d350ce59d4"
          ],
          "SubnetIds": [
            "subnet-01fa64739811f141b",
            "subnet-04943437a165d812b",
            "subnet-0365b7b01827b2dfe"
          ]
        },
        "ReservedConcurrentExecutions": 1
      },
      "DependsOn": [
        "YoutubeLogGroup"
      ]
    },
    "SecurityDashpruningLambdaVersiondt32vb0G5UZHOrcvPFHAdNfKFPVt51TmYvvRMakNU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SecurityDashpruningLambdaFunction"
        },
        "CodeSha256": "5Z03/XpYgpWcQ1ZVfpMTyrZcswHiO2G5SAxS+n59+HQ=",
        "Description": "Prunes security data"
      }
    },
    "AddDashmetaDashdataLambdaVersionLQLfTT9vM1l6ozBfb9ijs2dLXFCVVAD3nd2y5WKLpc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddDashmetaDashdataLambdaFunction"
        },
        "CodeSha256": "rNUpfVhRT8RclNeFSNPFuieH3ol1CRf9daPw/VcH2xE=",
        "Description": "Ingests securities, exchanges, in the morning, in the evening it ingests stats, quotes, and closing pricing"
      }
    },
    "AddDashholidaysLambdaVersioncHB6gpgz1V00VVhkaKLprOIG5i2pgNtZR8LZKavWmcc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddDashholidaysLambdaFunction"
        },
        "CodeSha256": "qoaq1X0vdrZbs1BvtRHZ6l4A9ZWDmwC9LQwqXIEVFyg=",
        "Description": "Ingests market holidays once a year"
      }
    },
    "EodDashpricingLambdaVersioney7TWYy38N0XKyhI3x3V1a8F5Q2bR83vKbO84AO4l8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EodDashpricingLambdaFunction"
        },
        "CodeSha256": "/bnuwkvd/iYuuRNM/f2fNWbJwpeHUAUruf3L65veIBw=",
        "Description": "Ingests pricing for securities after market close & allow for 15min delay to kick in"
      }
    },
    "IntradayDashpricingLambdaVersionFWQSAZATf7c0uXcoPkOx2q7BdLSs4A8rAP8ZHC1w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IntradayDashpricingLambdaFunction"
        },
        "CodeSha256": "NA3JEVf4jrZ517o/AfytfLCgpNqvaIUnDeTQ4sfcZ+w=",
        "Description": "Ingests intraday pricing"
      }
    },
    "CollectDashtradesLambdaVersionwr6uK7dgG9MQXocb1s3EplY5pdTCywvHOvL9bYVSc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectDashtradesLambdaFunction"
        },
        "CodeSha256": "f8DOwRv0uaoKo3VvXg7t12WaSkcABP8MVZAKJ0ikGI4=",
        "Description": "Collects Finicity Trades Daily"
      }
    },
    "YoutubeLambdaVersionqSaixcgDnrWhmR0rYmTvptLWw4aOpRe1dJDj63SIi4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "YoutubeLambdaFunction"
        },
        "CodeSha256": "GrEw52SCuy2kxu+hM/E5W7WMmFPQaKqBl+PeCHVLKgs=",
        "Description": "Ingests YouTube User Data"
      }
    },
    "SpotifyLambdaVersionNl963hiYTwGvPDLwRtECLAQQMVfPhPXYRWoRkfAMU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotifyLambdaFunction"
        },
        "CodeSha256": "9xWHY3eJ6x3Pqk3wKdtTDOYopgSIXcLyewdyLw8rPpg=",
        "Description": "Ingests Spotify User Data"
      }
    },
    "TwitterLambdaVersionI2tzej7IOTB1Ye1vxRoi1GD01tdOkOWNZhn6WOD3k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TwitterLambdaFunction"
        },
        "CodeSha256": "VDcrX56SXJuU1FXkwVVyDuValdHjEjAOJJXq+qWuUxQ=",
        "Description": "Ingests Twitter Data"
      }
    },
    "SubstackLambdaVersionYxnS1UCzF6j2NtcBSVItswWvQJpCkh7862oQNl0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubstackLambdaFunction"
        },
        "CodeSha256": "ON7s5fom6ykLWzlGeu8f/WL5ojop6aH6ECGU2qDN27M=",
        "Description": "Ingests Substack Data"
      }
    },
    "CollectDashtradesEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CollectDashtradesLambdaFunction",
                "Arn"
              ]
            },
            "Id": "collect-tradesSchedule"
          }
        ]
      }
    },
    "CollectDashtradesLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectDashtradesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CollectDashtradesEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule3": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 12 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule3",
            "Arn"
          ]
        }
      }
    },
    "AddDashmetaDashdataEventsRuleSchedule4": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashmetaDashdataLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-meta-dataSchedule"
          }
        ]
      }
    },
    "AddDashmetaDashdataLambdaPermissionEventsRuleSchedule4": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashmetaDashdataEventsRuleSchedule4",
            "Arn"
          ]
        }
      }
    },
    "AddDashholidaysEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 0 1 1 ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AddDashholidaysLambdaFunction",
                "Arn"
              ]
            },
            "Id": "add-holidaysSchedule"
          }
        ]
      }
    },
    "AddDashholidaysLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddDashholidaysLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AddDashholidaysEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "IntradayDashpricingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(* 12-20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "IntradayDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "intraday-pricingSchedule"
          }
        ]
      }
    },
    "IntradayDashpricingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IntradayDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "IntradayDashpricingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "IntradayDashpricingEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(2 20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "IntradayDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "intraday-pricingSchedule"
          }
        ]
      }
    },
    "IntradayDashpricingLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IntradayDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "IntradayDashpricingEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "EodDashpricingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 20 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EodDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "eod-pricingSchedule"
          }
        ]
      }
    },
    "EodDashpricingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EodDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EodDashpricingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "EodDashpricingEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 19 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EodDashpricingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "eod-pricingSchedule"
          }
        ]
      }
    },
    "EodDashpricingLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EodDashpricingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EodDashpricingEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SecurityDashpruningEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 7 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SecurityDashpruningLambdaFunction",
                "Arn"
              ]
            },
            "Id": "security-pruningSchedule"
          }
        ]
      }
    },
    "SecurityDashpruningLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SecurityDashpruningLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SecurityDashpruningEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SpotifyEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SpotifyLambdaFunction",
                "Arn"
              ]
            },
            "Id": "spotifySchedule"
          }
        ]
      }
    },
    "SpotifyLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpotifyEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SpotifyEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 23 ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SpotifyLambdaFunction",
                "Arn"
              ]
            },
            "Id": "spotifySchedule"
          }
        ]
      }
    },
    "SpotifyLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SpotifyEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "SubstackEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SubstackLambdaFunction",
                "Arn"
              ]
            },
            "Id": "substackSchedule"
          }
        ]
      }
    },
    "SubstackLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubstackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SubstackEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SubstackEventsRuleSchedule2": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 23 ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SubstackLambdaFunction",
                "Arn"
              ]
            },
            "Id": "substackSchedule"
          }
        ]
      }
    },
    "SubstackLambdaPermissionEventsRuleSchedule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubstackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SubstackEventsRuleSchedule2",
            "Arn"
          ]
        }
      }
    },
    "TwitterEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(*/10 * ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "TwitterLambdaFunction",
                "Arn"
              ]
            },
            "Id": "twitterSchedule"
          }
        ]
      }
    },
    "TwitterLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TwitterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "TwitterEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "YoutubeEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 11 ? * MON-SUN *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "YoutubeLambdaFunction",
                "Arn"
              ]
            },
            "Id": "youtubeSchedule"
          }
        ]
      }
    },
    "YoutubeLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "YoutubeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "YoutubeEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-ServerlessDeploymentBucketName"
      }
    },
    "SecurityDashpruningLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SecurityDashpruningLambdaVersiondt32vb0G5UZHOrcvPFHAdNfKFPVt51TmYvvRMakNU"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SecurityDashpruningLambdaFunctionQualifiedArn"
      }
    },
    "AddDashmetaDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddDashmetaDashdataLambdaVersionLQLfTT9vM1l6ozBfb9ijs2dLXFCVVAD3nd2y5WKLpc"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-AddDashmetaDashdataLambdaFunctionQualifiedArn"
      }
    },
    "AddDashholidaysLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddDashholidaysLambdaVersioncHB6gpgz1V00VVhkaKLprOIG5i2pgNtZR8LZKavWmcc"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-AddDashholidaysLambdaFunctionQualifiedArn"
      }
    },
    "EodDashpricingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EodDashpricingLambdaVersioney7TWYy38N0XKyhI3x3V1a8F5Q2bR83vKbO84AO4l8"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-EodDashpricingLambdaFunctionQualifiedArn"
      }
    },
    "IntradayDashpricingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IntradayDashpricingLambdaVersionFWQSAZATf7c0uXcoPkOx2q7BdLSs4A8rAP8ZHC1w"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-IntradayDashpricingLambdaFunctionQualifiedArn"
      }
    },
    "CollectDashtradesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectDashtradesLambdaVersionwr6uK7dgG9MQXocb1s3EplY5pdTCywvHOvL9bYVSc"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-CollectDashtradesLambdaFunctionQualifiedArn"
      }
    },
    "YoutubeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "YoutubeLambdaVersionqSaixcgDnrWhmR0rYmTvptLWw4aOpRe1dJDj63SIi4"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-YoutubeLambdaFunctionQualifiedArn"
      }
    },
    "SpotifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotifyLambdaVersionNl963hiYTwGvPDLwRtECLAQQMVfPhPXYRWoRkfAMU"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SpotifyLambdaFunctionQualifiedArn"
      }
    },
    "TwitterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TwitterLambdaVersionI2tzej7IOTB1Ye1vxRoi1GD01tdOkOWNZhn6WOD3k"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-TwitterLambdaFunctionQualifiedArn"
      }
    },
    "SubstackLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubstackLambdaVersionYxnS1UCzF6j2NtcBSVItswWvQJpCkh7862oQNl0"
      },
      "Export": {
        "Name": "sls-tradingpost-job-production-SubstackLambdaFunctionQualifiedArn"
      }
    }
  }
}