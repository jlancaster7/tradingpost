import { AccountGroupHPRs, AccountGroupHPRsTable, FinicityAccount, FinicityHolding, FinicityInstitution, FinicityTransaction, FinicityUser, GetSecurityBySymbol, GetSecurityPrice, HistoricalHoldings, IBrokerageRepository, ISummaryRepository, SecurityHPRs, SecurityIssue, SecurityPrices, TradingPostAccountGroups, TradingPostAccountGroupStats, TradingPostBrokerageAccounts, TradingPostBrokerageAccountsTable, TradingPostBrokerageAccountWithFinicity, TradingPostCurrentHoldings, TradingPostCurrentHoldingsTableWithSecurity, TradingPostHistoricalHoldings, TradingPostInstitution, TradingPostInstitutionTable, TradingPostInstitutionWithFinicityInstitutionId, TradingPostTransactions, TradingPostTransactionsTable, TradingPostUser, TradingPostCashSecurity, FinicityAndTradingpostBrokerageAccount, OptionContract, OptionContractTable, IbkrAccountTable, IbkrAccount, IbkrSecurity, IbkrActivity, IbkrCashReport, IbkrNav, IbkrPl, IbkrPosition, TradingPostCurrentHoldingsTableWithMostRecentHolding, SecurityTableWithLatestPriceRobinhoodId, TradingPostTransactionsByAccountGroup, BrokerageTask, BrokerageTaskType, BrokerageTaskStatusType, OptionContractWithSymbol } from "./interfaces";
import { IDatabase, IMain } from "pg-promise";
import { DateTime } from "luxon";
import { addSecurity, getUSExchangeHoliday } from "../market-data/interfaces";
import { OptionContractTableWithRobinhoodId, RobinhoodAccount, RobinhoodAccountTable, RobinhoodInstrument, RobinhoodInstrumentTable, RobinhoodOption, RobinhoodOptionTable, RobinhoodPosition, RobinhoodTransaction, RobinhoodUser, RobinhoodUserTable } from "./robinhood/interfaces";
export default class Repository implements IBrokerageRepository, ISummaryRepository {
    private db;
    private readonly pgp;
    constructor(db: IDatabase<any>, pgp: IMain);
    execTx: (fn: (r: Repository) => Promise<void>) => Promise<void>;
    updateTask: (taskId: number, params: {
        userId?: string;
        brokerage?: string;
        type?: BrokerageTaskType;
        date?: DateTime;
        brokerageUserId?: string;
        started?: DateTime;
        finished?: DateTime;
        status?: BrokerageTaskStatusType;
        error?: any;
        data?: any;
        messageId?: string;
    }) => Promise<void>;
    updateErrorStatusOfAccount: (accountId: number, error: boolean, errorCode: number) => Promise<void>;
    updateTradingPostBrokerageAccountLastUpdated: (userId: string, brokerageUserId: string, brokerageName: string) => Promise<DateTime>;
    getCashSecurityId: () => Promise<GetSecurityBySymbol>;
    getFinicityAccountByTradingpostBrokerageAccountId: (tpBrokerageAccountId: number) => Promise<FinicityAndTradingpostBrokerageAccount | null>;
    getSecurityPricesWithEndDateBySecurityIds: (startDate: DateTime, endDate: DateTime, securityIds: number[]) => Promise<GetSecurityPrice[]>;
    getMarketHolidays: (endDate: DateTime) => Promise<getUSExchangeHoliday[]>;
    getTradingPostBrokerageAccountByUser: (tpUserId: string, authenticationService: string, accountNumber: string) => Promise<TradingPostBrokerageAccountsTable | null>;
    getTradingPostBrokerageAccount: (accountId: number) => Promise<TradingPostBrokerageAccountsTable | null>;
    getTradingPostBrokerageAccountsByBrokerageNumbersAndAuthService: (tpUserId: string, brokerageNumbers: string[], authenticationService: string) => Promise<TradingPostBrokerageAccountsTable[]>;
    getTradingPostBrokerageAccountCurrentHoldingsWithSecurity: (accountId: number) => Promise<TradingPostCurrentHoldingsTableWithSecurity[]>;
    getTradingPostBrokerageWithMostRecentHolding: (tpUserId: string, brokerage: string) => Promise<TradingPostCurrentHoldingsTableWithMostRecentHolding[]>;
    getTradingPostBrokerageAccountTransactions: (accountId: number) => Promise<TradingPostTransactionsTable[]>;
    getTradingPostAccountsWithFinicityNumber: (userId: string) => Promise<TradingPostBrokerageAccountWithFinicity[]>;
    getSecuritiesWithIssue: () => Promise<SecurityIssue[]>;
    getTradingpostCashSecurity: () => Promise<TradingPostCashSecurity[]>;
    upsertInstitutions: (institutions: TradingPostInstitution[]) => Promise<void>;
    upsertInstitution: (institution: TradingPostInstitution) => Promise<number>;
    getInstitutionByName: (name: string) => Promise<TradingPostInstitutionTable | null>;
    getInstitutions: () => Promise<TradingPostInstitutionTable[]>;
    getTradingPostInstitutionByFinicityId: (finicityInstitutionId: number) => Promise<TradingPostInstitutionWithFinicityInstitutionId | null>;
    addSecurity: (sec: addSecurity) => Promise<number>;
    upsertFinicityInstitution: (institution: FinicityInstitution) => Promise<number>;
    upsertFinicityInstitutions: (institutions: FinicityInstitution[]) => Promise<void>;
    getFinicityUser: (userId: string) => Promise<FinicityUser | null>;
    getFinicityUsers: () => Promise<FinicityUser[]>;
    getTradingPostUserByFinicityCustomerId: (finicityCustomerId: string) => Promise<TradingPostUser | null>;
    getFinicityUserByFinicityCustomerId: (customerId: string) => Promise<FinicityUser | null>;
    addFinicityUser: (userId: string, customerId: string, type: string) => Promise<FinicityUser>;
    upsertFinicityAccounts: (accounts: FinicityAccount[]) => Promise<void>;
    getFinicityAccounts: (finicityUserId: number) => Promise<FinicityAccount[]>;
    upsertFinicityHoldings: (holdings: FinicityHolding[]) => Promise<void>;
    upsertFinicityTransactions: (transactions: FinicityTransaction[]) => Promise<void>;
    getTradingPostBrokerageAccounts: (userId: string) => Promise<TradingPostBrokerageAccountsTable[]>;
    upsertTradingPostBrokerageAccounts: (accounts: TradingPostBrokerageAccounts[]) => Promise<number[]>;
    deleteTradingPostAccountCurrentHoldings: (accountIds: number[]) => Promise<void>;
    deleteTradingPostBrokerageData: (accountId: number) => Promise<void>;
    getTradingPostAccountGroups: (userId: string) => Promise<TradingPostAccountGroups[]>;
    addTradingPostAccountGroup: (userId: string, name: string, accountIds: number[], defaultBenchmarkId: number) => Promise<number>;
    upsertTradingPostCurrentHoldings: (currentHoldings: TradingPostCurrentHoldings[]) => Promise<void>;
    upsertTradingPostHistoricalHoldings: (historicalHoldings: TradingPostHistoricalHoldings[]) => Promise<void>;
    getOldestTransaction: (accountId: number) => Promise<TradingPostTransactions | null>;
    upsertTradingPostTransactions: (transactions: TradingPostTransactions[]) => Promise<void>;
    getTradingPostHoldingsByAccountGroup: (userId: string, accountGroupId: number, startDate: DateTime, endDate?: DateTime) => Promise<HistoricalHoldings[]>;
    getTradingPostCurrentHoldingsByAccountGroup: (accountGroupId: number) => Promise<HistoricalHoldings[]>;
    getTradingPostTransactionsByAccountGroup: (accountGroupId: number, paging: {
        limit: number;
        offset: number;
    } | undefined, cash?: boolean) => Promise<TradingPostTransactionsByAccountGroup[]>;
    getTradingPostAccountGroupReturns: (accountGroupId: number, startDate: DateTime, endDate: DateTime) => Promise<AccountGroupHPRsTable[]>;
    getDailySecurityPrices: (securityId: number, startDate: DateTime, endDate: DateTime) => Promise<SecurityPrices[]>;
    addSecurities: (securities: addSecurity[]) => Promise<void>;
    getSecuritiesBySymbol: (symbols: string[]) => Promise<GetSecurityBySymbol[]>;
    getSecurities: (securityIds: number[]) => Promise<GetSecurityBySymbol[]>;
    addAccountGroupReturns: (accountGroupReturns: AccountGroupHPRs[]) => Promise<number>;
    addBenchmarkReturns: (benchmarkReturns: SecurityHPRs[]) => Promise<number>;
    addAccountGroupSummary: (accountGroupSummary: TradingPostAccountGroupStats) => Promise<number>;
    getAccountGroupSummary: (accountGroupId: number) => Promise<TradingPostAccountGroupStats>;
    deleteFinicityHoldings: (accountIds: number[]) => Promise<void>;
    deleteFinicityTransactions: (accountIds: number[]) => Promise<void>;
    deleteFinicityAccounts: (accountIds: number[]) => Promise<void>;
    deleteTradingPostBrokerageAccounts: (accountIds: number[]) => Promise<void>;
    addOptionContract: (optionContract: OptionContract) => Promise<number>;
    upsertOptionContracts: (optionContracts: OptionContract[]) => Promise<void>;
    upsertOptionContract: (oc: OptionContract) => Promise<number | null>;
    getOptionContract: (securityId: number, expirationDate: DateTime, strikePrice: number, optionType: string) => Promise<OptionContractTable | null>;
    getOptionContractsByExternalIds: (externalIds: string[]) => Promise<OptionContractWithSymbol[]>;
    getAccountOptionsContractsByTransactions: (accountId: number, securityId: number, strikePrice: number) => Promise<OptionContractTable[]>;
    getTradingPostBrokerageAccountsByBrokerageAndIds: (userId: string, brokerage: string, brokerageAccountIds: string[]) => Promise<TradingPostBrokerageAccountsTable[]>;
    getIbkrMasterAndSubAccounts: (accountId: string) => Promise<IbkrAccountTable[]>;
    getIbkrAccount: (accountId: string) => Promise<IbkrAccountTable | null>;
    upsertIbkrAccounts: (accounts: IbkrAccount[]) => Promise<void>;
    upsertIbkrSecurities: (securities: IbkrSecurity[]) => Promise<void>;
    upsertIbkrActivity: (activities: IbkrActivity[]) => Promise<void>;
    upsertIbkrCashReport: (cashReports: IbkrCashReport[]) => Promise<void>;
    upsertIbkrNav: (navs: IbkrNav[]) => Promise<void>;
    upsertIbkrPls: (pls: IbkrPl[]) => Promise<void>;
    upsertIbkrPositions: (positions: IbkrPosition[]) => Promise<void>;
    getRobinhoodUser: (userId: string, username?: string) => Promise<RobinhoodUserTable | null>;
    getRobinhoodUsers: () => Promise<RobinhoodUserTable[]>;
    updateRobinhoodUser: (user: RobinhoodUser) => Promise<void>;
    insertRobinhoodUser: (user: RobinhoodUser) => Promise<void>;
    deleteRobinhoodAccountsPositions: (accountIds: number[]) => Promise<void>;
    getRobinhoodAccountsByRobinhoodUserId: (userId: number) => Promise<RobinhoodAccountTable[]>;
    upsertRobinhoodAccounts: (accs: RobinhoodAccount[]) => Promise<void>;
    addRobinhoodInstrument: (instrument: RobinhoodInstrument) => Promise<number>;
    upsertRobinhoodTransactions: (txs: RobinhoodTransaction[]) => Promise<void>;
    upsertRobinhoodOption: (option: RobinhoodOption) => Promise<number | null>;
    upsertRobinhoodPositions: (positions: RobinhoodPosition[]) => Promise<void>;
    getRobinhoodInstrumentsByExternalId: (instrumentIds: string[]) => Promise<RobinhoodInstrumentTable[]>;
    getRobinhoodInstrumentBySymbol: (symbol: string) => Promise<RobinhoodInstrumentTable | null>;
    getSecurityWithLatestPricingWithRobinhoodIds: (rhIds: number[]) => Promise<SecurityTableWithLatestPriceRobinhoodId[]>;
    getTradingPostOptionsWithRobinhoodOptionIds: (rhOptionIds: number[]) => Promise<OptionContractTableWithRobinhoodId[]>;
    getRobinhoodOptionsByExternalIds: (externalIds: string[]) => Promise<RobinhoodOptionTable[]>;
    getRobinhoodOption: (internalOptionId: number) => Promise<RobinhoodOptionTable | null>;
    getOrInsertBrokerageTaskByMessageId: (messageId: string, brokerageTask: BrokerageTask) => Promise<number | null>;
    scheduleTradingPostAccountForDeletion: (accountId: number) => Promise<void>;
}
