import { AccountGroupHPRs, AccountGroupHPRsTable, FinicityAccount, FinicityHolding, FinicityInstitution, FinicityTransaction, FinicityUser, GetSecurityBySymbol, GetSecurityPrice, HistoricalHoldings, IBrokerageRepository, ISummaryRepository, SecurityHPRs, SecurityIssue, SecurityPrices, TradingPostAccountGroups, TradingPostAccountGroupStats, TradingPostAccountToAccountGroup, TradingPostBrokerageAccounts, TradingPostBrokerageAccountsTable, TradingPostBrokerageAccountWithFinicity, TradingPostCurrentHoldings, TradingPostCurrentHoldingsTable, TradingPostCurrentHoldingsTableWithSecurity, TradingPostCustomIndustry, TradingPostHistoricalHoldings, TradingPostInstitution, TradingPostInstitutionTable, TradingPostInstitutionWithFinicityInstitutionId, TradingPostTransactions, TradingPostTransactionsTable } from "./interfaces";
import { IDatabase, IMain } from "pg-promise";
import { DateTime } from "luxon";
import { getUSExchangeHoliday } from "../market-data/interfaces";
export default class Repository implements IBrokerageRepository, ISummaryRepository {
    private db;
    private readonly pgp;
    constructor(db: IDatabase<any>, pgp: IMain);
    getSecurityPricesWithEndDateBySecurityIds: (endDate: DateTime, securityIds: number[]) => Promise<GetSecurityPrice[]>;
    getMarketHolidays: (endDate: DateTime) => Promise<getUSExchangeHoliday[]>;
    getTradingPostBrokerageAccount: (accountId: number) => Promise<TradingPostBrokerageAccountsTable>;
    getTradingPostBrokerageAccountCurrentHoldingsWithSecurity: (accountId: number) => Promise<TradingPostCurrentHoldingsTableWithSecurity[]>;
    getTradingPostBrokerageAccountCurrentHoldings: (accountId: number) => Promise<TradingPostCurrentHoldingsTable[]>;
    getTradingPostBrokerageAccountTransactions: (accountId: number) => Promise<TradingPostTransactionsTable[]>;
    getTradingPostAccountsWithFinicityNumber: (userId: string) => Promise<TradingPostBrokerageAccountWithFinicity[]>;
    getSecuritiesWithIssue: () => Promise<SecurityIssue[]>;
    getTradingPostInstitutionsWithFinicityId: () => Promise<TradingPostInstitutionWithFinicityInstitutionId[]>;
    upsertInstitutions: (institutions: TradingPostInstitution[]) => Promise<void>;
    upsertInstitution: (institution: TradingPostInstitution) => Promise<number>;
    getInstitutions: () => Promise<TradingPostInstitutionTable[]>;
    getTradingPostInstitutionsWithFinicityInstitutionId: () => Promise<TradingPostInstitutionWithFinicityInstitutionId[]>;
    getTradingPostInstitutionByFinicityId: (finicityInstitutionId: number) => Promise<TradingPostInstitutionWithFinicityInstitutionId | null>;
    upsertFinicityInstitution: (institution: FinicityInstitution) => Promise<number>;
    upsertFinicityInstitutions: (institutions: FinicityInstitution[]) => Promise<void>;
    getFinicityInstitutions: () => Promise<FinicityInstitution[]>;
    getFinicityInstitutionsById: (finicityInstitutionIds: number[]) => Promise<FinicityInstitution[]>;
    getFinicityUser: (userId: string) => Promise<FinicityUser | null>;
    addFinicityUser: (userId: string, customerId: string, type: string) => Promise<FinicityUser>;
    addFinicityAccount: (account: FinicityAccount) => Promise<FinicityAccount>;
    upsertFinicityAccounts: (accounts: FinicityAccount[]) => Promise<void>;
    getFinicityAccounts: (finicityUserId: number) => Promise<FinicityAccount[]>;
    upsertFinicityHoldings: (holdings: FinicityHolding[]) => Promise<void>;
    getFinicityHoldings: (finicityUserId: number) => Promise<FinicityHolding[]>;
    upsertFinicityTransactions: (transactions: FinicityTransaction[]) => Promise<void>;
    getFinicityTransactions: (finicityUserId: number) => Promise<FinicityTransaction[]>;
    getTradingPostBrokerageAccounts: (userId: string) => Promise<TradingPostBrokerageAccountsTable[]>;
    addTradingPostBrokerageAccounts: (accounts: TradingPostBrokerageAccounts[]) => Promise<void>;
    upsertTradingPostBrokerageAccounts: (accounts: TradingPostBrokerageAccounts[]) => Promise<void>;
    addTradingPostAccountGroups: (accountGroups: TradingPostAccountGroups[]) => Promise<void>;
    getTradingPostAccountGroups: (userId: string) => Promise<TradingPostAccountGroups[]>;
    addTradingPostAccountGroup: (userId: string, name: string, accountIds: number[], defaultBenchmarkId: number) => Promise<number>;
    addTradingPostCurrentHoldings: (currentHoldings: TradingPostCurrentHoldings[]) => Promise<void>;
    upsertTradingPostCurrentHoldings: (currentHoldings: TradingPostCurrentHoldings[]) => Promise<void>;
    addTradingPostHistoricalHoldings: (historicalHoldings: TradingPostHistoricalHoldings[]) => Promise<void>;
    upsertTradingPostHistoricalHoldings: (historicalHoldings: TradingPostHistoricalHoldings[]) => Promise<void>;
    addTradingPostCustomIndustries: (customIndustries: TradingPostCustomIndustry[]) => Promise<void>;
    addTradingPostTransactions: (transactions: TradingPostTransactions[]) => Promise<void>;
    upsertTradingPostTransactions: (transactions: TradingPostTransactions[]) => Promise<void>;
    addTradingPostAccountGroupStats: (groupStats: TradingPostAccountGroupStats[]) => Promise<void>;
    addTradingPostAccountToAccountGroup: (accountToAccountGroups: TradingPostAccountToAccountGroup[]) => Promise<void>;
    getTradingPostHoldingsByAccount: (userId: string, accountId: number, startDate: DateTime, endDate: DateTime) => Promise<HistoricalHoldings[]>;
    getTradingPostHoldingsByAccountGroup: (userId: string, accountGroupId: number, startDate: DateTime, endDate?: DateTime) => Promise<HistoricalHoldings[]>;
    getTradingPostCurrentHoldingsByAccountGroup: (accountGroupId: number) => Promise<HistoricalHoldings[]>;
    getTradingPostAccountGroupReturns: (accountGroupId: number, startDate: DateTime, endDate: DateTime) => Promise<AccountGroupHPRsTable[]>;
    getDailySecurityPrices: (securityId: number, startDate: DateTime, endDate: DateTime) => Promise<SecurityPrices[]>;
    getSecurities: (securityIds: number[]) => Promise<GetSecurityBySymbol[]>;
    getAccountGroupHPRsLatestDate: (accountGroupId: number) => Promise<any>;
    addAccountGroupReturns: (accountGroupReturns: AccountGroupHPRs[]) => Promise<number>;
    addBenchmarkReturns: (benchmarkReturns: SecurityHPRs[]) => Promise<number>;
    addAccountGroupSummary: (accountGroupSummary: TradingPostAccountGroupStats) => Promise<number>;
}
