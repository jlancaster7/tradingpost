import { FinicityAccount, FinicityHolding, FinicityTransaction, FinicityUser, IFinicityRepository, TradingPostUser } from "../interfaces";
import Finicity from "../../finicity";
import { GetCustomerAccountsResponse } from "../../finicity/interfaces";
import { DateTime } from "luxon";
import { Transformer as FinicityTransformer } from "./transformer";
import { PortfolioSummaryService } from "../portfolio-summary";
export declare class Service {
    private readonly finicityApi;
    private repository;
    private transformer;
    private readonly portSummarySrv;
    constructor(finicityApi: Finicity, repository: IFinicityRepository, transformer: FinicityTransformer, portfolioSummaryStats?: PortfolioSummaryService);
    calculatePortfolioStatistics: (userId: string, brokerageUserId: string, date: DateTime, data?: any) => Promise<void>;
    remove: (userId: string, brokerageUserId: string, date: DateTime, data?: any) => Promise<void>;
    update: (userId: string, brokerageUserId: string, date: DateTime, data?: any, isDev?: boolean) => Promise<void>;
    add: (userId: string, brokerageUserId: string, date: DateTime, data?: any, isDev?: boolean) => Promise<void>;
    getTradingPostUserAssociatedWithBrokerageUser: (brokerageUserId: string) => Promise<TradingPostUser>;
    generateBrokerageAuthenticationLink: (userId: string, brokerageAccount?: string, brokerageAccountId?: string) => Promise<string>;
    _createFinicityUser: (userId: string) => Promise<FinicityUser>;
    importInstitutions: () => Promise<void>;
    getAddInstitution: (finicityInstitutionId: number) => Promise<{
        tradingPostInstitutionId: number;
        finicityInstitutionId: number;
    }>;
    _getNewFinicityAccounts: (finicityUserId: number, currentFinicityAccounts: FinicityAccount[], finicityAccounts: GetCustomerAccountsResponse) => Promise<{
        id: number;
        finicityUserId: number;
        finicityInstitutionId: number;
        accountId: any;
        number: any;
        accountNickname: any;
        detailMargin: any;
        lastUpdatedDate: any;
        marketSegment: any;
        accountNumberDisplay: any;
        realAccountNumberLast4: any;
        name: any;
        balance: any;
        type: any;
        aggregationStatusCode: any;
        status: any;
        customerId: any;
        institutionId: any;
        balanceDate: any;
        aggregationSuccessDate: any;
        aggregationAttemptDate: any;
        createdDate: any;
        currency: any;
        lastTransactionDate: any;
        oldestTransactionDate: any;
        institutionLoginId: any;
        detailMarginAllowed: any;
        detailCashAccountAllowed: any;
        detailDescription: any;
        detailMarginBalance: any;
        detailShortBalance: any;
        detailAvailableCashBalance: any;
        detailCurrentBalance: any;
        detailDateAsOf: any;
        displayPosition: any;
        parentAccount: any;
        updatedAt: DateTime;
        createdAt: DateTime;
        txPushId: string;
        txPushSigningKey: string;
    }[]>;
    importAccounts: (finicityUser: FinicityUser) => Promise<number[]>;
    _createExternalFinAccountToInternalFinAccountMap: (finUserInternalId: number) => Promise<Map<string, FinicityAccount>>;
    _mapFinicityAccount: (fa: any, finicityUserId: number, finicityInstitutionId: number) => {
        id: number;
        finicityUserId: number;
        finicityInstitutionId: number;
        accountId: any;
        number: any;
        accountNickname: any;
        detailMargin: any;
        lastUpdatedDate: any;
        marketSegment: any;
        accountNumberDisplay: any;
        realAccountNumberLast4: any;
        name: any;
        balance: any;
        type: any;
        aggregationStatusCode: any;
        status: any;
        customerId: any;
        institutionId: any;
        balanceDate: any;
        aggregationSuccessDate: any;
        aggregationAttemptDate: any;
        createdDate: any;
        currency: any;
        lastTransactionDate: any;
        oldestTransactionDate: any;
        institutionLoginId: any;
        detailMarginAllowed: any;
        detailCashAccountAllowed: any;
        detailDescription: any;
        detailMarginBalance: any;
        detailShortBalance: any;
        detailAvailableCashBalance: any;
        detailCurrentBalance: any;
        detailDateAsOf: any;
        displayPosition: any;
        parentAccount: any;
        updatedAt: DateTime;
        createdAt: DateTime;
        txPushId: string;
        txPushSigningKey: string;
    };
    _mapFinicityHolding: (pos: any, internalFinAccountId: number) => FinicityHolding;
    _mapFinicityTransaction: (tx: any, internalFinAccountId: number) => FinicityTransaction;
    importHoldings: (tpUserId: string, finicityUser: FinicityUser) => Promise<Map<string, any>>;
    importTransactions: (tpUserId: string, finicityUser: FinicityUser) => Promise<Map<string, any>>;
    _iterateTransactions: (tpUserId: string, finicityUser: FinicityUser) => Promise<FinicityTransaction[]>;
    removeAccounts: (brokerageCustomerId: string, accountIds: string[]) => Promise<number[]>;
}
